{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","ets/images/Infinity-1.7s-200px (2).svg","components/Profile/MyPosts/Post/Post.module.css","ets/images/userPhoto.jpg","components/Dialogs/Dialogs.module.css","serviceWorker.ts","api/api.ts","Redux/ProfileReducer.tsx","Redux/DialogsReducer.tsx","Redux/SideBarReducer.tsx","Redux/users-reducer.tsx","Redux/authReducer.ts","Redux/appReducer.ts","Redux/reduxStore.tsx","components/Navbar/Friends.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/Music/Music.tsx","components/common/Preloader/Preloader.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","utils/validators/validators.ts","components/common/FormControls/FormsControl.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Users/Users.tsx","hoc/withAuthRedirect.tsx","Redux/users-selector.ts","components/Users/UsersContainer.tsx","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/login/login.tsx","App.tsx","index.tsx","components/common/FormControls/FormsControl.module.css","components/Navbar/Friends.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Users/users.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","initialState","newPostText","postData","id","message","likesCount","profile","setUserStatusAC","type","initial","dialogs","name","avatar","messages","names","users","totalUsersCount","isFetching","followingInProgress","setCurrentPage","toggleIsFetching","toggleIsFollowingProgress","login","isAuth","setUserDataAC","payload","getAuthUserData","dispatch","resultCode","initialized","reducers","combineReducers","ProfilePage","state","action","newPost","Date","getTime","DialogsPage","body","newMessageBody","SideBar","UserPage","map","u","followed","filter","auth","form","formReducer","app","initialize","store","createStore","applyMiddleware","thunkMiddleware","Friends","props","className","s","friends","friend1","friendsName","src","friend2","Navbar","nav","item","active","to","activeClassName","activeLink","News","Settings","Music","Preloader","preloader","ProfileStatus","editMode","activateEditMode","setState","deActivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","this","onDoubleClick","onChange","autoFocus","onBlur","React","Component","ProfileInfo","descriptionBlock","photos","large","alt","fullName","Post","likeCount","required","maxLengthCreator","maxLength","length","FormControl","meta","error","touched","children","hasError","styles","formControl","Textarea","input","restProps","Input","maxLength10","AddNewPostReduxForm","reduxForm","onSubmit","handleSubmit","Field","placeholder","component","validate","MyPostsContainer","connect","addPost","addPostAC","postsElements","p","postsBlock","values","posts","Profile","ProfileContainer","params","authorizedUserId","history","push","getUserProfile","getUserStatus","compose","withRouter","Header","header","loginBlock","onClick","logOut","HeaderContainer","Users","pagesCount","Math","ceil","pages","i","selectedPage","onPageChanged","key","small","userPhoto","disabled","some","unFollow","follow","mapStateToPropsForRedirect","WithAuthRedirect","RedirectComponent","getUsersReselect","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","getUsers","followSuccess","unFollowSuccess","page","items","totalCount","DialogItem","path","dialog","Message","maxLength100","AddMessageReduxForm","addMessage","sendMessageAC","dialogsElements","d","messagesElements","m","dialogsItems","LoginReduxForm","style","formSummaryError","stopSubmit","_error","formData","App","initializeApp","getState","exact","render","DialogsContainer","promise","Promise","all","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f3ed8c9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__7zfh-\",\"item\":\"Navbar_item__19Uc8\",\"activeLink\":\"Navbar_activeLink__1hPU1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__zyVjb\"};","module.exports = __webpack_public_path__ + \"static/media/Infinity-1.7s-200px (2).5791e18c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3FWst\"};","module.exports = __webpack_public_path__ + \"static/media/userPhoto.13ab99f3.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3o_BZ\",\"dialogsItems\":\"Dialogs_dialogsItems__2CPCd\",\"active\":\"Dialogs_active__3MlCb\",\"messages\":\"Dialogs_messages__e1rOP\",\"message\":\"Dialogs_message__8hzqO\",\"avatar\":\"Dialogs_avatar__2zOW_\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"49002ff0-14a4-442d-95b4-9079087ed1b9\"\n    }\n});\n\nexport const usersAPI = {\n    getUsers(currentPage: number, pageSize: number) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`,).then(response => {\n            return response.data;\n        });\n    },\n    follow(userId: number) {\n        return instance.post(`follow/${userId}`)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`)\n    },\n\n    getProfile(userId: number) {\n        console.warn('Obsolete method. Please use profileAPI object ')\n        debugger\n        return profileAPI.getProfile(userId);\n\n    }\n}\n\nexport const profileAPI = {\n\n    getProfile(userId: number) {\n        return instance.get(`profile/` + userId);\n    },\n    getStatus(userId: number) {\n        return instance.get(`profile/status/` + userId);\n    },\n    updateStatus(status: string) {\n        return instance.put(`profile/status`, { status: status});\n    }\n\n}\n\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`);\n    },\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post(`auth/login`, {email, password, rememberMe});\n    },\n    logout() {\n        return instance.delete(`auth/login`);\n    },\n}\n\n","import {ActionTypes, PostDataType, ProfilePageType, RootStateType,} from \"./Store\";\nimport {Dispatch} from \"redux\";\nimport {profileAPI, usersAPI} from \"../api/api\";\n\nexport type ProfilePropsType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: {\n        github: string\n        website: string\n    }\n    photos: {\n        small: string\n        large: string\n    }\n\n}\n\nlet initialState={ newPostText:\"\",\n    postData:  [\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\n        {id: 2, message: \"It's my first post\", likesCount: 7},\n        {id: 3, message: \"EEEEEHHHHHAAAAA\", likesCount: 4},\n        {id: 4, message: \"Game Over\", likesCount: 77},\n        {id: 5, message: \"I'd die for you\", likesCount: 756},\n    ] as Array<PostDataType>,\n    profile: null as null | ProfilePropsType,\n    status:''\n}\ntype InitialStateType = typeof initialState\nexport const profileReducer=(state=initialState,action:ActionTypes):InitialStateType=>{\n       switch (action.type) {\n           case \"ADD-POST\":{ const newPost:PostDataType={\n               id:new Date().getTime(),\n               message:action.newPostText,\n               likesCount:0\n           };\n               return {\n                   ...state,\n                   postData:[...state.postData,newPost],\n\n               }\n\n               }\n\n\n           case \"SET USER PROFILE\":\n               return {...state,profile:action.profile}\n           case \"SET USER STATUS\":\n               return {...state,status:action.status }\n\n           default:\n               return state\n       }\n\n\n\n\n    }\n\nexport const addPostAC=(newPostText:string)=>{\n    return {\n        type:\"ADD-POST\",\n        newPostText\n    } as const\n}\n\nexport const setUserProfileAC=(profile:ProfilePropsType)=>{\n    return {\n        type:\"SET USER PROFILE\",\n        profile:profile\n    } as const\n}\nexport const setUserStatusAC=(status:string)=>{\n    return {\n        type:\"SET USER STATUS\",\n        status:status\n    } as const\n}\n\nexport const getUserProfile = (userId: number) => {\n    return (dispatch: Dispatch) => {\n\n        usersAPI.getProfile(userId)\n            .then(response => {\n                debugger\n                dispatch(setUserProfileAC(response.data));\n            });\n    }\n}\n\nexport const getUserStatus=(userId:number)=> {\n    return (dispatch: Dispatch<ActionTypes>) => {\n        profileAPI.getStatus(userId).then(response => {\n            dispatch(setUserStatusAC(response.data));\n        })\n    }\n}\n\nexport const updateUserStatus=(status:string)=> {\n    return (dispatch: Dispatch<ActionTypes>) => {\n        profileAPI.updateStatus(status).then(response => {\n          if(response.data.resultCode===0){\n              dispatch(setUserStatusAC(status));\n          }\n        })\n    }\n}\n","import {ActionTypes, DialogsPageType, RootStateType} from \"./Store\";\n\nlet initial = {\n    dialogs: [\n        {\n            id: 1,\n            name: \"Sergo\",\n            avatar: \"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"\n        },\n        {\n            id: 2,\n            name: \"Pedro\",\n            avatar: \"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"\n        },\n        {\n            id: 3,\n            name: \"Vito\",\n            avatar: \"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"\n        },\n        {\n            id: 4,\n            name: \"Mikele\",\n            avatar: \"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"\n        },\n        {\n            id: 5,\n            name: \"Fredo\",\n            avatar: \"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"\n        },\n        {\n            id: 6,\n            name: \"Santino\",\n            avatar: \"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"\n        }\n\n    ],\n\n    messages: [\n        {id: 1, message: \"hi\"},\n        {id: 2, message: \"How are you?\"},\n        {id: 3, message: \"YAAAAAAAAAAAAAAA!!\"},\n        {id: 4, message: \"We are the champions!!!\"},\n        {id: 5, message: \"OOOOOOHHHHHHHHHHH!!!\"},\n        {id: 6, message: \"Sergo, you are cool!\"},\n\n\n    ],\n\n\n}\n\n\nexport const dialogsReducer = (state: DialogsPageType = initial, action: ActionTypes) => {\n    let stateCopy\n\n    switch (action.type) {\n\n        case \"SEND MESSAGE\":\n            let body = action.newMessageBody\n            return stateCopy = {\n                ...state,\n               messages: [...state.messages, {id: new Date().getTime(), message: body}]\n\n            }\n        default:\n            return state\n    }\n\n\n}\n\n\nexport const sendMessageAC = (newMessageBody:string) => {\n    return {\n        type: \"SEND MESSAGE\",\n        newMessageBody\n\n    } as const\n}","import {RootStateType, SideBarType} from \"./Store\";\nlet initial={\n    names:[\n        {id: 1, name: \"Sergo\"},\n        {id: 2, name: \"Pedro\"},\n        {id: 3, name: \"Vito\"},\n        {id: 4, name: \"Mikele\"},\n        {id: 5, name: \"Fredo\"},\n        {id: 6, name: \"Santino\"}\n    ]}\nexport const sideBarReducer=(state:SideBarType=initial,action:any)=>{\n    return state\n}","import {ActionTypes, PostDataType, ProfilePageType, RootStateType,} from \"./Store\";\nimport {Dispatch} from \"react\";\nimport {usersAPI} from \"../api/api\";\nexport type UsersPageType= {\n    users:Array<UsersType>\n    pageSize:number,\n    totalUsersCount:number\n    currentPage:number\n    isFetching:boolean\n    followingInProgress:Array<number>\n}\n\n\nexport type UsersType={\n    id:number,\n    photos: { small:string\n        large:string\n    }\n    followed:boolean,\n    name:string,\n    status:string,\n    /* location:{\n         city:string\n         country:string\n     }*/\n\n}\n\n\nlet initial:UsersPageType={\n    users:  [\n\n\n    ],\n    pageSize:5,\n    totalUsersCount:0,\n    currentPage:1,\n    isFetching:true,\n    followingInProgress:[]\n\n}\n\nexport const usersReducer=(state:UsersPageType=initial,action:ActionTypes)=>{\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users:state.users.map(u=>{\n                    if(u.id===action.userId){\n                        return {...u,followed:true}\n                    }\n                    return u;\n                })\n            }\n        case \"UNFOLLOW\":\n            return {\n                ...state,\n                users:state.users.map(u=>{\n                    if(u.id===action.userId){\n                        return {...u,followed:false}\n                    }\n                    return u;\n                })\n            }\n        case \"SET USERS\":{\n            return {...state,users:action.users}\n        }\n        case \"SET CURRENT PAGE\":{\n            return {...state,currentPage:action.currentPage}\n        }\n        case \"SET TOTAL USERS COUNT\":\n            return {...state,totalUsersCount:action.totalUsersCount}\n        case \"TOGGLE IS FETCHING\":\n            return {...state,isFetching:action.isFetching}\n        case \"TOGGLE IS FOLLOWING PROGRESS\":\n            return {...state,followingInProgress:action.isFetching?[...state.followingInProgress,action.userId]:\n                    state.followingInProgress.filter(id=>id!=action.userId)}\n        default:\n            return state\n    }\n\n\n\n\n}\n\nexport const followSuccess=(userId:number)=>{\n    return {\n        type:\"FOLLOW\",\n        userId\n    } as const\n}\nexport const unFollowSuccess=(userId:number)=>{\n    return {\n        type:\"UNFOLLOW\",\n        userId\n    } as const\n}\nexport const setUsers=(users:Array<UsersType>)=>{\n    return {\n        type:\"SET USERS\",\n        users\n    } as const\n}\nexport const setCurrentPage=(currentPage:number)=>{\n    return {\n        type:\"SET CURRENT PAGE\",\n        currentPage\n    } as const\n}\n\nexport const setTotalUsersCount=(totalUsersCount:number)=> {\n    return {\n        type: \"SET TOTAL USERS COUNT\",\n        totalUsersCount\n    } as const\n}\nexport const toggleIsFetching=(isFetching:boolean)=>{\n    return {\n        type:\"TOGGLE IS FETCHING\",\n        isFetching\n    } as const\n\n\n}\n\nexport const toggleIsFollowingProgress=(isFetching:boolean,userId:number)=>{\n    return {\n        type:\"TOGGLE IS FOLLOWING PROGRESS\",\n        isFetching,userId\n    } as const\n\n\n}\n\nexport const getUsers=(page:number,pageSize:number)=>{\n    return (dispatch:Dispatch<ActionTypes>)=>{\n        dispatch(toggleIsFetching(true))\n        dispatch(setCurrentPage(page))\n\n\n        usersAPI.getUsers(page,pageSize).\n        then(data => {\n            dispatch(toggleIsFetching(false))\n            dispatch(setUsers(data.items))\n            dispatch(setTotalUsersCount(data.totalCount))\n        })\n    }\n}\n\nexport const follow=(userId:number) => {\n    return (dispatch:Dispatch<ActionTypes>)=>{\n        dispatch(toggleIsFollowingProgress(true,userId));\n        usersAPI.follow(userId)\n\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(followSuccess(userId))\n                }\n                dispatch(toggleIsFollowingProgress(false,userId))\n            });\n    }\n}\nexport const unFollow=(userId:number) => {\n    return (dispatch:Dispatch<ActionTypes>)=>{\n        dispatch(toggleIsFollowingProgress(true,userId));\n        usersAPI.unfollow(userId)\n\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unFollowSuccess(userId))\n                }\n                dispatch(toggleIsFollowingProgress(false,userId))\n            });\n    }\n}\n\n\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\n\nimport {stopSubmit} from \"redux-form\";\n\n\nexport type authPageType = typeof initial\n\n\n\nlet initial = {\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    userId: null as (number | null)\n\n\n}\n\nexport const authReducer = (state: authPageType = initial, action: ActionTypes) => {\n    switch (action.type) {\n        case \"SET-USER-DATA\":\n            debugger\n            return {\n                ...state,\n                ...action.payload,\n\n\n            }\n\n\n        default:\n            return state\n    }\n\n\n}\n\nexport const setUserDataAC = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => {\n\n    return {\n        type: \"SET-USER-DATA\",\n        payload: {\n            userId, email, login, isAuth\n        }\n    } as const\n}\n\nexport const getAuthUserData = () => {\n\n    return (dispatch: Dispatch) =>\n        authAPI.me()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    debugger\n                    let {id, email, login} = response.data.data\n                    debugger\n                    dispatch(setUserDataAC(id, email, login, true))\n\n                }\n            });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport const login = (email: string, password: string, rememberMe: boolean) => {\n    return (dispatch: Dispatch<any>) => {\n\n\n        authAPI.login(email, password, rememberMe).then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(getAuthUserData());\n            } else {\n                let message=response.data.messages.length>0?response.data.messages[0]:\"Some error\";\n                dispatch(stopSubmit(\"login\", {_error: message}))\n            }\n        })\n    }\n}\n\nexport const logOut = () => {\n    return (dispatch: Dispatch<setUserDataActionType>) => {\n        authAPI.logout().then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(setUserDataAC(null, null, null, false));\n            }\n        })\n    }\n}\n\n\ntype ActionTypes = setUserDataActionType\ntype setUserDataActionType = ReturnType<typeof setUserDataAC>","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\n\nimport {stopSubmit} from \"redux-form\";\nimport {getAuthUserData, setUserDataAC} from \"./authReducer\";\n\n\nexport type authPageType = typeof initial\n\n\n\nlet initial = {\n    initialized:false\n\n\n}\n\nexport const appReducer = (state: authPageType = initial, action: ActionTypes) => {\n    switch (action.type) {\n        case \"SET-INITIALIZED\":\n            debugger\n            return {\n                ...state,\n                initialize:true,\n\n\n            }\n\n        default:\n            return state\n    }\n\n\n}\n\nexport const setInitializedSuccess =()=> ({type: \"SET-INITIALIZED\"})\n\n\n\n\nexport const initializeApp = () => {\n\n    return (dispatch: Dispatch<any>) =>{\n\n        let promise=dispatch(getAuthUserData());\nPromise.all([promise]).\nthen(()=>{\n    dispatch(setInitializedSuccess());\n})\n\n    }\n\n\n\n\n            };\n\n\n\ntype ActionTypes = setUserDataActionType\ntype setUserDataActionType = ReturnType<typeof setInitializedSuccess>","import {combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"./ProfileReducer\";\nimport {dialogsReducer} from \"./DialogsReducer\";\nimport {sideBarReducer} from \"./SideBarReducer\";\nimport {usersReducer} from \"./users-reducer\";\nimport {authReducer} from \"./authReducer\";\nimport {applyMiddleware} from  \"redux\";\nimport thunkMiddleware from \"redux-thunk\"\nimport {reducer as formReducer} from \"redux-form\"\nimport {appReducer} from \"./appReducer\";\n\nlet reducers=combineReducers({\n        ProfilePage:profileReducer,\n        DialogsPage:dialogsReducer,\n        SideBar:sideBarReducer,\n         UserPage:usersReducer,\n    auth:authReducer,\n    form:formReducer,\n    app:appReducer\n}\n    )\ntype RootReducers=typeof reducers\nexport type StoreType=ReturnType<RootReducers>\nexport let store=createStore(reducers,applyMiddleware(thunkMiddleware));\n\n","import React from \"react\";\nimport s from \"./Friends.module.css\"\nimport {DialogsDataType, NamesType} from \"../../Redux/Store\";\n\ntype FriendsPropsType = {\n    friendsName:Array<NamesType>\n}\n\nexport function Friends(props: FriendsPropsType) {\n\n    return <div className={s.friends}>\n        <div>Friends</div>\n\n            <div className={s.friend1}>\n                <div>{props.friendsName[0].name}</div>\n\n            <img\n                src={\"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"}/>\n        </div>\n\n             <div className={s.friend2}>\n                <div>{props.friendsName[1].name}</div>\n\n            <img\n                src={\"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"}/>\n        </div>\n         <div className={s.friend2}>\n                <div>{props.friendsName[2].name}</div>\n\n            <img\n                src={\"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"}/>\n        </div>\n        </div>\n\n\n\n\n\n\n}","import React from \"react\";\nimport s from \"./Navbar.module.css\"\nimport {NavLink} from \"react-router-dom\";\nimport {Friends} from \"./Friends\";\nimport {DialogsDataType, NamesType, RootStateType, SideBarType} from \"../../Redux/Store\";\ntype NavbarPropsType={\n    state:SideBarType\n}\nexport function Navbar  (props:NavbarPropsType)  {\n    return <nav className={s.nav }>\n        <div className={`${s.item} ${s.active}`}>\n            <NavLink to={\"/profile\"} activeClassName={s.activeLink}>Profile</NavLink>\n        </div>\n        <div className={`${s.item} ${s.active}`}>\n            <NavLink to={\"/dialogs\"} activeClassName={s.activeLink}>Messages</NavLink>\n        </div>\n        <div className={`${s.item} ${s.active}`}>\n            <NavLink to={\"/news\"} activeClassName={s.activeLink}>News</NavLink>\n        </div>\n        <div className={`${s.item} ${s.active}`}>\n            <NavLink to={\"/users\"} activeClassName={s.activeLink}>Users</NavLink>\n        </div>\n        <div className={`${s.item} ${s.active}`}>\n            <NavLink to={\"/music\"} activeClassName={s.activeLink}>Music</NavLink>\n        </div>\n        <div className={`${s.item} ${s.active}`}>\n            <NavLink to={\"/settings\"} activeClassName={s.activeLink}>Settings</NavLink>\n        </div>\n        <div>\n            <div>\n                <Friends friendsName={props.state.names}/>\n            </div>\n\n        </div>\n    </nav>\n}","import React from \"react\";\nimport s from \"./News.module.css\"\nexport function News(props:any) {\n    return(\n        <div >\n            News\n        </div>\n    )\n\n}","import React from \"react\";\nimport s from \"./Settings.module.css\"\nexport function Settings(props:any) {\n    return(\n        <div >\n            Settings\n        </div>\n    )\n\n}","import React from \"react\";\nimport s from \"./Music.module.css\"\nexport function Music(props:any) {\n    return(\n        <div >\n            Music\n        </div>\n    )\n\n}","import React from \"react\";\nimport preloader from \"../../../ets/images/Infinity-1.7s-200px (2).svg\";\ntype PreloaderPropsType={\n\n}\nexport function Preloader(props:PreloaderPropsType){\nreturn  <img src={preloader} />}","import React, {ChangeEvent} from \"react\";\nimport s from \"./ProfileInfo.module.css\"\nimport {setUserStatusAC} from \"../../../Redux/ProfileReducer\";\n\n\nexport type ProfileStatusType = {\n    status: string\n    updateUserStatus:(status:string)=>void\n}\n\ntype stateType={\n    editMode: boolean,\n    status:string\n}\nexport class ProfileStatus extends React.Component<ProfileStatusType, any> {\n\n    state:stateType = {\n        editMode: false,\n        status:this.props.status\n    }\n\nactivateEditMode=()=>{\n        this.setState({\n            editMode:true\n        })\n   }\n    deActivateEditMode=()=>{\n        this.setState({\n            editMode:false\n        })\n    this.props.updateUserStatus(this.state.status)\n    }\n    onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\nthis.setState({status:e.currentTarget.value})\n\n    }\n    componentDidUpdate(prevProps:ProfileStatusType,prevState:stateType){\nif (prevProps.status!==this.props.status){\n    this.setState({status:this.props.status})\n}\n\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status||'No status'}</span>\n                </div>}\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange}   autoFocus={true} onBlur={this.deActivateEditMode} value={this.state.status}></input>\n                </div>\n                }\n\n            </div>\n\n\n        )\n    }\n}","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\"\nimport {ProfilePropsType} from \"../../../Redux/ProfileReducer\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus\";\n\n\ntype ProfileInfoType = {\n    profile: ProfilePropsType | null\n    updateUserStatus:(status:string)=>void\n    status:string\n}\n\n export function ProfileInfo(props: ProfileInfoType) {\n    if(!props.profile){\n        return <Preloader/>\n    }\n    return (<div >\n           {/* <div>\n                <img src=\"https://sun1-22.userapi.com/7IowIVrx-i0lzcwIiMbsBavXYfnl-7Tzw_nnig/24o24nNgf0I.jpg\" alt=\"\"/>\n            </div>*/}\n            <div className={s.descriptionBlock}>\n                <img src={props.profile?.photos.large} alt=\"\"/><br/>\n\n                {props.profile.fullName}\n                <ProfileStatus updateUserStatus={props.updateUserStatus} status={props.status} />\n            </div>\n        </div>\n\n    )\n}","import React from \"react\";\nimport s from \"./Post.module.css\"\n\nexport function Post (props:any) {\n\n    return     <div className={s.item}>\n                <img src={\"https://avatars.mds.yandex.net/get-pdb/1649566/54263c63-814a-40c4-bec0-14fd28ff1733/s1200?webp=false\"}/>\n        {props.message}\n        <div><span>like{props.likeCount}</span></div>\n\n            </div>\n\n\n}","// @ts-ignore\nexport const required= (value:string)=>{\n   if (value) return undefined;\n   return \"Field is required\"\n\n}\n\n\n\nexport const maxLengthCreator=(maxLength:number)=> (value:string)=>{\n    if (value.length>maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined\n\n}\n\n\n","import React from \"react\";\n\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\nimport styles from \"./FormsControl.module.css\"\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {error, touched}, children}) => {\n    const hasError = error && touched;\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    );\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n}","import React, {ChangeEvent} from \"react\";\nimport s from \"./MyPosts.module.css\"\nimport {Post} from \"./Post/Post\"\n\nimport {ActionTypes,  PostDataType} from \"../../../Redux/Store\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport { maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormControls/FormsControl\";\n\n\n\ntype MyPostsPropsType = {\n    post: Array<PostDataType>\n    newPostText: string\n    addPost:(values:string)=>void\n\n\n}\n\nexport function MyPosts(props: MyPostsPropsType) {\n\n\n    let postsElements = props.post.map(p => <Post message={p.message} likeCount={p.likesCount}/>)\n\n\n    let addPost = function (values:any) {\n        props.addPost(values.newPostText)\n\n    }\n\n\n\n    return (<div className={s.postsBlock}>\n        <h3>My post</h3>\n            <AddNewPostReduxForm onSubmit={addPost}/>\n        <div>\n            New post\n        </div>\n        <div className={s.posts}>\n            {postsElements}\n\n\n        </div>\n    </div>\n\n    )}\n\nconst maxLength10=maxLengthCreator(10)\nconst AddNewPostForm:React.FC<InjectedFormProps<MyPostsPropsType>> =(props)=>{\nreturn <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field name=\"newPostText\" placeholder={\"post message\"} component={Textarea} validate={[required,maxLength10]}/>\n        </div>\n        <div>\n            <button >Add post</button>\n        </div>\n    </form>\n\n\n}\n\nexport const AddNewPostReduxForm = reduxForm<MyPostsPropsType>(\n    {form:'ProfileAddNewPostForm'}\n)(AddNewPostForm)","import React, {ChangeEvent, Dispatch} from \"react\";\n\nimport {ActionTypes, PostDataType, ProfilePageType} from \"../../../Redux/Store\";\nimport {addPostAC} from \"../../../Redux/ProfileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {store, StoreType} from \"../../../Redux/reduxStore\";\n\nimport {connect} from \"react-redux\";\n\n\ntype MyPostsPropsContainerType = {}\n\n\nconst mapStateToProps=(state:StoreType)=>{\n\n    return{\n        post:state.ProfilePage.postData,\n        newPostText:state.ProfilePage.newPostText,\n\n    }\n}\nconst mapDispatchToProps=(dispatch:Dispatch<ActionTypes>)=>{\n    return{\n\n        addPost:(newPostText:string)=>{\n            dispatch(addPostAC(newPostText))\n        }\n    }\n}\nexport const MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React from \"react\";\n\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {ProfilePropsType} from \"../../Redux/ProfileReducer\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\nexport type ProfileType = {\n    profile: ProfilePropsType | null\n    status:string\n    updateUserStatus:(status:string)=>void\n\n\n}\n\n\n\nexport function Profile (props:ProfileType)  {\n    return     (\n        <div> <ProfileInfo profile={props.profile} status={props.status}  updateUserStatus={props.updateUserStatus} />\n            <MyPostsContainer  />\n\n            </div>)}\n","import React from \"react\";\n\nimport {Profile} from \"./Profile\";\nimport {getUserProfile, getUserStatus, ProfilePropsType, updateUserStatus} from \"../../Redux/ProfileReducer\";\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router\";\n\nimport {compose} from 'redux';\n\n\ntype MapStateType = {\n    profile: ProfilePropsType | null\n    status: string\n    authorizedUserId: any\n    isAuth: boolean\n}\n\ntype MapDispatchType = {\n    getUserStatus:(userId: number) => void\n    getUserProfile: (userId: number) => void\n\n    updateUserStatus: (status: string) => void\n}\ntype PathParamsType = {\n    userId: any\n\n}\ntype OwnPropsType = MapDispatchType & MapStateType\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n    componentDidMount() {\n\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if(!userId){\n                this.props.history.push(\"/login\")\n            }\n        }\n\n        this.props.getUserProfile(userId);\n        this.props.getUserStatus(userId)\n\n    }\n\n    render() {\n\n        return (\n            <div><Profile {...this.props}\n                          profile={this.props.profile}\n                          status={this.props.status}\n                          updateUserStatus={this.props.updateUserStatus} />\n\n\n            </div>)\n    }\n}\n\nconst mapStateToProps = (state:StoreType): MapStateType => {\n    return {\n        profile: state.ProfilePage.profile,\n        status:state.ProfilePage.status,\n        authorizedUserId:state.auth.userId,\n        isAuth:state.auth.isAuth\n\n\n};}\n\n    export default compose<React.ComponentType>(\n        /*WithAuthRedirect,*/\n        withRouter,\n        connect(mapStateToProps, {getUserProfile,getUserStatus,updateUserStatus}),\n    )(ProfileContainer)","import React from \"react\";\nimport s from \"./Header.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport {authPageType} from \"../../Redux/authReducer\";\ntype HeaderType = {\n    login: string | null\n    isAuth: boolean\n    logOut:()=>void\n}\nexport function Header (props:HeaderType)  {\n    return <header className={s.header}>\n        <img\n            src={\"https://banner2.cleanpng.com/20180405/vvq/kisspng-sport-trinity-academy-team-game-rugby-medival-knight-5ac5f0b3c33920.0510478815229216517996.jpg\"}/>\n    <div className={s.loginBlock}>\n        {props.isAuth?<div>{props.login}-<button onClick={props.logOut}>Log Out</button></div>:\n        <NavLink to={\"/login\"} >\nLogin\n        </NavLink>}\n    </div>\n    </header>\n}","import React from \"react\";\n\nimport {Header} from \"./Header\";\nimport axios from \"axios\";\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport { logOut} from \"../../Redux/authReducer\";\nimport {authAPI} from \"../../api/api\";\n\n\ntype MapStateType = {\n    login: string | null\n    isAuth: boolean\n\n\n}\ntype MapDispatchType = {\n\n    logOut:()=>void\n}\ntype PropsType = MapStateType & MapDispatchType\nclass HeaderContainer extends React.Component<PropsType>   {\n\n\n    render() {\n        return <Header\n            login={this.props.login}\n            isAuth={this.props.isAuth}\n            logOut={this.props.logOut}\n\n        />\n    }\n\n\n\n}\nconst mapStateToProps = (state: StoreType): MapStateType => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.login\n    }\n}\n\n\n\nexport default connect<MapStateType, MapDispatchType, {}, StoreType>(mapStateToProps, {\n    logOut\n})(HeaderContainer);","import React from \"react\"\nimport styles from \"./users.module.css\";\nimport userPhoto from \"../../ets/images/userPhoto.jpg\";\nimport {UsersType} from \"../../Redux/users-reducer\";\nimport {NavLink} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {usersAPI} from \"../../api/api\";\n\ntype UserType={\n    onPageChanged:(currentPage:number)=>void\n    users: Array<UsersType>\n    totalUsersCount:number\n    currentPage:number\n    pageSize:number\n    follow: (userId: number) => void,\n    unFollow: (userId: number) => void,\n\n    followingInProgress:Array<number>\n}\n\nexport let Users=(props:UserType)=> {\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\n    let pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n    return <div>\n        <div>\n            {pages.map(p => {\n\n\n                // @ts-ignore\n                return <span className={props.currentPage === p && styles.selectedPage}\n                             onClick={(e) => {\n                                 props.onPageChanged(p)\n                             }}\n                >{p}</span>\n            })}\n\n        </div>\n        {\n\n            props.users.map(u => <div key={u.id}>\n            <span>\n                <div>\n                    <NavLink to={'/profile/' + u.id}>\n                        <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}\n                             alt=\"\"/>\n                    </NavLink>\n\n                </div>\n                <div>\n                    {u.followed ?\n                        <button disabled={props.followingInProgress.\n                        some(id=>id===u.id)}  onClick={() => {\n                 props.unFollow(u.id);\n\n\n                        }}>Unfollow</button>\n                        : <button disabled={props.followingInProgress.some(id=>id===u.id)}\n                                  onClick={() => {\n                         props.follow(u.id)\n\n                        }}>Follow</button>}\n\n                </div>\n            </span>\n                <span>\n                <span>\n                    <div>{u.name}</div>\n                    <div>{u.status}</div>\n                </span>\n                <span>\n                     <div>{\"u.location.country\"}</div>\n                     <div>{\"u.location.city\"}</div>\n                </span>\n            </span>\n            </div>)\n        }\n\n\n    </div>\n\n}\n","import React from \"react\"\nimport {Redirect} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../Redux/reduxStore\";\n\n\ntype RedirectComponentTYPE = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: StoreType) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const WithAuthRedirect = (Component: React.ComponentType) => {\n    class RedirectComponent extends React.Component<RedirectComponentTYPE> {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\n            return <Component {...this.props}/>\n        }\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}","import {StoreType} from \"./reduxStore\";\nimport {createSelector} from \"reselect\";\n\nexport const getUsersSelector=(state:StoreType)=>{\n    return state.UserPage.users\n}\n\n\n// @ts-ignore\nexport const getUsersReselect=createSelector(getUsersSelector,\n    (users:[])=>{\n        return users.filter(u=>true)\n    }\n)\n\nexport const getPageSize=(state:StoreType)=>{\n    return state.UserPage.pageSize\n}\nexport const getTotalUsersCount=(state:StoreType)=>{\n    return state.UserPage.totalUsersCount\n}\n\nexport const getCurrentPage=(state:StoreType)=>{\n    return state.UserPage.currentPage\n}\nexport const getIsFetching=(state:StoreType)=>{\n    return state.UserPage.isFetching\n}\n\nexport const getFollowingInProgress=(state:StoreType)=>{\n    return state.UserPage.followingInProgress\n}","import React, {Dispatch} from \"react\"\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport {ActionTypes} from \"../../Redux/Store\";\nimport {compose} from 'redux';\nimport preloader from \"../../ets/images/Infinity-1.7s-200px (2).svg\"\nimport {\n    follow, getUsers,\n    setCurrentPage,\n    toggleIsFollowingProgress,\n    unFollow,\n\n    UsersType\n} from \"../../Redux/users-reducer\";\nimport axios from \"axios\";\nimport {Users} from \"./Users\";\nimport {Preloader} from \"../common/Preloader/Preloader\";\nimport {usersAPI} from \"../../api/api\";\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount, getUsersReselect, getUsersSelector\n} from \"../../Redux/users-selector\";\n\nexport type UsersPropsType = {\n    users: Array<UsersType>\n    follow: (userId: number) => void,\n    unFollow: (userId: number) => void,\n\n    setCurrentPage: (currentPage: number) => void\n    totalUsersCount: number\n    currentPage: number\n    pageSize: number\n\n    isFetching:boolean\n\n    toggleIsFollowingProgress:(isFetching:boolean,userId:number)=>void\n    followingInProgress:Array<number>\n    getUsers:(currentPage:number,pageSize:number)=>void\n}\n\n\nexport class UsersContainer extends React.Component<UsersPropsType> {\n    componentDidMount() {\n        this.props.getUsers(this.props.currentPage,this.props.pageSize);\n\n\n\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.setCurrentPage(pageNumber);\n     this.props.getUsers(pageNumber,this.props.pageSize)\n        }\n\n\n    render() {\n\n\n        return <>\n            {this.props.isFetching? <Preloader />:null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   users={this.props.users}\n                   currentPage={this.props.currentPage}\n                   pageSize={this.props.pageSize}\n                   onPageChanged={this.onPageChanged}\n                   unFollow={this.props.unFollow}\n                   follow={this.props.follow}\n\n                   followingInProgress={this.props.followingInProgress}\n\n            />\n        </>\n    }\n}\n\n/*let mapStateToProps=(state:StoreType)=>{\n    return{\n        users: state.UserPage.users,\n        pageSize: state.UserPage.pageSize,\n        totalUsersCount: state.UserPage.totalUsersCount,\n        currentPage: state.UserPage.currentPage,\n        isFetching: state.UserPage.isFetching,\n        followingInProgress:state.UserPage.followingInProgress\n\n\n\n    }\n}*/\nlet mapStateToProps=(state:StoreType)=>{\n    return{\n        users: getUsersReselect(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress:getFollowingInProgress(state)\n\n\n\n    }\n}\n\n\nexport default compose<any>(\n    WithAuthRedirect,\n    connect(mapStateToProps, {follow, unFollow, setCurrentPage,toggleIsFollowingProgress, getUsers})\n)(UsersContainer)","import React from \"react\";\nimport s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n    avatar:string\n}\n\nexport function DialogItem(props: DialogItemPropsType) {\n    let path = \"/dialogsItem/\" + props.id\n    return (\n\n        <div className={s.dialog + ' ' + s.active}>\n            <img src={props.avatar} alt=\"\" className={s.avatar}/>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n\n    )\n}\n","import React from \"react\";\nimport s from \"./../Dialogs.module.css\"\n\n\n\ntype MessagePropsType = {\n    message: string\n}\n\nexport function Message(props: MessagePropsType) {\n    return (\n        <div className={s.message}>{props.message}</div>\n\n    )\n}\n","import React, {ChangeEvent} from \"react\";\nimport s from \"./Dialogs.module.css\"\n\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\nimport {Message} from \"./Message/Message\";\nimport {\n    ActionTypes,\n\n    DialogsDataType,\n    DialogsPageType,\n    MessageDataType,\n\n} from \"../../Redux/Store\";\n\nimport {Redirect} from \"react-router\";\nimport {Field, InjectedFormProps, reduxForm, SubmitHandler} from \"redux-form\";\nimport {Textarea} from \"../common/FormControls/FormsControl\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n    avatar:string\n}\ntype MessagePropsType = {\n    message: string\n}\n\ntype DialogsPropsType={\n    state:DialogsPageType\n    addMessage:(newMessageBody:string)=>void\n    isAuth:boolean\n\n}\n\n\n\n\nexport function Dialogs(props: DialogsPropsType) {\n    let dialogsElements = props.state.dialogs.map((d) => <DialogItem name={d.name} key={d.id}  id={d.id} avatar={d.avatar}/>);\n\n    let messagesElements = props.state.messages.map((m) => <Message key={m.id} message={m.message}/>)\n\n\n    let addNewMessageClick=function (values:any) {\n        props.addMessage(values.newMessageBody)\n\n    }\nif(!props.isAuth) return <Redirect to={\"/login\"}/>\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n\n\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n\n<AddMessageReduxForm onSubmit={addNewMessageClick}/>\n        </div>\n\n\n    )\n\n}\nconst maxLength100=maxLengthCreator(100)\nconst AddMessageForm:React.FC<InjectedFormProps<DialogsPropsType>> =(props)=>{\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} validate={[required,maxLength100]} name='newMessageBody' placeholder='Enter your message'  ></Field>\n            </div>\n            <div>\n                <button >Send</button>\n            </div>\n        </form>\n\n    )\n}\n\nexport const AddMessageReduxForm = reduxForm<DialogsPropsType>(\n    {form:'dialogAddMessageForm'}\n)(AddMessageForm)\n","import React, {ChangeEvent, Dispatch} from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport {compose} from 'redux';\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\nimport {Message} from \"./Message/Message\";\nimport {\n    ActionTypes,\n\n    DialogsPageType,\n    MessageDataType,\n\n} from \"../../Redux/Store\";\n\nimport { sendMessageAC} from \"../../Redux/DialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\n\nimport {store, StoreType} from \"../../Redux/reduxStore\";\n\nimport {connect} from \"react-redux\";\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\n\n\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n    avatar:string\n}\ntype MessagePropsType = {\n    message: string\n}\n\ntype DialogsContainerPropsType={\n\n}\n\n\n\n\n\n\n\n\nlet mapStateToProps=(state:StoreType)=>{\n    return{state: state.DialogsPage,\n\n    }\n}\nlet mapDispatchToProps=(dispatch:Dispatch<ActionTypes>)=>{\n    return{\n        addMessage:(newMessageBody:string)=>{\n            dispatch(sendMessageAC(newMessageBody))\n        },\n\n    }\n}\nexport default compose<any>(\n    connect(mapStateToProps, mapDispatchToProps),\n    WithAuthRedirect\n)(Dialogs);\n\n","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\n\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\n\nimport {Redirect} from 'react-router-dom';\n\nimport style from \"./../common/FormControls/FormsControl.module.css\";\nimport {Input} from \"../common/FormControls/FormsControl\";\nimport {StoreType} from \"../../Redux/reduxStore\";\nimport {login} from \"../../Redux/authReducer\";\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={\"Email\"} name={\"email\"}\n                       validate={[required]}\n                       component={Input}/>\n            </div>\n            <div>\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\n                       validate={[required]}\n                       component={Input}/>\n            </div>\n            <div>\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/> remember me\n            </div>\n            {props.error && <div className={style.formSummaryError}>\n                {props.error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\nconst Login = (props: any) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe)\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit}/>\n    </div>\n}\n\nconst mapStateToProps = (state:StoreType) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\n\nimport './App.css';\nimport {Header} from \"./components/Header/Header\";\nimport {Navbar} from \"./components/Navbar/Navbar\";\n\nimport {BrowserRouter, Route} from \"react-router-dom\"\nimport {News} from \"./components/News/News\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {Music} from \"./components/Music/Music\";\n\nimport {ActionTypes,} from \"./Redux/Store\";\nimport {store, StoreType} from \"./Redux/reduxStore\";\n\n\n\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport Login from \"./components/login/login\";\nimport {connect} from \"react-redux\";\nimport {getAuthUserData, logOut} from \"./Redux/authReducer\";\nimport {withRouter} from \"react-router\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./Redux/appReducer\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\n\n\n\ntype MapStateType = {\n    initialized:boolean\n\n\n}\n\n\n\ntype MapDispatchType = {\n    initializeApp:()=>void\n\n}\ntype PropsType = MapStateType & MapDispatchType\n\n\nclass App extends React.Component<PropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if(this.props.initialized){\n            return <Preloader/>\n        }\n        const state = store.getState()\n\n\n        return (\n\n            <BrowserRouter>\n                <div className={\"app-wrapper\"}>\n                    <HeaderContainer/>\n                    <Navbar state={state.SideBar}/>\n                    <div className=\"app-wrapper-content\">\n                        <Route exact path={\"/dialogs\"} render={() => <DialogsContainer/>}/>\n                        <Route path={\"/profile/:userId?\"} render={() => <ProfileContainer/>}/>\n                        <Route path={\"/users\"} render={() => <UsersContainer/>}/>\n                        <Route path={\"/login\"} render={() => <Login/>}/>\n                        <Route path={\"/news\"} render={() => <News/>}/>\n                        <Route path={\"/settings\"} render={() => <Settings/>}/>\n                        <Route path={\"/music\"} render={() => <Music/>}/>\n\n                    </div>\n\n\n                </div>\n\n            </BrowserRouter>)\n\n    }\n}\n\nconst mapStateToProps = (state: StoreType): MapStateType => {\n    return {\n        initialized:state.app.initialized\n    }\n}\n\nexport default compose(connect<MapStateType, MapDispatchType, {}, StoreType>(mapStateToProps, {\n    initializeApp\n})) (App)","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./Redux/reduxStore\"\n\n\n\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\n\n\n\n\nReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n            <App/>\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__22FUb\",\"error\":\"FormsControl_error__3qdJD\",\"formSummaryError\":\"FormsControl_formSummaryError__PgsFO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend1\":\"Friends_friend1__3XtJL\",\"friend2\":\"Friends_friend2__3SFUI\",\"friend3\":\"Friends_friend3__2ZQ-k\",\"friends\":\"Friends_friends__3_pn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__CJzH2\",\"posts\":\"MyPosts_posts__xUmT9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3bllH\",\"loginBlock\":\"Header_loginBlock__2Lfb8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__12fEO\",\"selectedPage\":\"users_selectedPage__32kXI\"};"],"sourceRoot":""}